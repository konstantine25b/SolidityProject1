{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// get funds from users\n//withdraw funds\n//set a min value in usd\n\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n//    uint256 public minUSD = 50 *1e18;\n   uint256 public constant minUSD = 50 * 10 ** 18;\n\n   address[] public funders;\n   mapping(address=>uint256) public addressToAmountFunder;\n\n   address public immutable owner;\n\n   AggregatorV3Interface public priceFeed;\n    \n   constructor(address priceFeedAddress){\n\n      owner = msg.sender;\n      priceFeed= AggregatorV3Interface(priceFeedAddress);\n   }\n\n\n    function fund() public payable {\n        // wnat to be able to set min amount in usd\n    //    getConversionRate(msg.value);\n        require(msg.value.getConversionRate(priceFeed) >=minUSD, \"not enought money\");\n        funders.push(msg.sender);\n        addressToAmountFunder[msg.sender] = msg.value;\n\n    }\n\n    function withdraw() public onlyOwner{\n\n        for(uint256 funderIndex = 0 ; funderIndex< funders.length ; funderIndex++){\n           address funder = funders[funderIndex] ;\n           addressToAmountFunder[funder] = 0 ;\n          \n        }\n         funders = new address[](0);\n\n        (bool callSuccess ,) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"call failed\");   \n\n    }\n    \n    modifier onlyOwner{\n        // require(msg.sender == owner ,\"sender is not a owner\");\n\n        if (msg.sender != owner){\n            revert NotOwner();\n        }\n        _; \n    }\n\n    receive() external payable{\n        fund();\n    }\n    fallback() external payable{\n        fund();\n    }\n\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n\n    function getPrice(AggregatorV3Interface priceFeed)internal view returns(uint256){\n        //ABI \n       //address 0x694AA1769357215DE4FAC081bf1f309aDC325306\n      \n       (,int256 price,,,)= priceFeed.latestRoundData();\n    //    return uint256(price* 1e10);\n     return uint256(price * 10000000000);\n\n    }\n\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        // uint256 ethAmountInUsd=  (ethPrice/ethAmount) / 1e18;\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        return ethAmountInUsd;\n\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}